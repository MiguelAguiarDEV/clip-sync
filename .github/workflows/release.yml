name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.work
      - name: Build server
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          ext=""; [ "$GOOS" = windows ] && ext=.exe || true
          go -C server build -trimpath -ldflags "-s -w" -o "dist/server_${GOOS}_${GOARCH}${ext}" ./cmd/server
      - name: Build CLI
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          ext=""; [ "$GOOS" = windows ] && ext=.exe || true
          go -C clients/cli build -trimpath -ldflags "-s -w" -o "dist/cli_${GOOS}_${GOARCH}${ext}" .
      - uses: actions/upload-artifact@v4
        with:
          name: clip-sync-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/server_${{ matrix.goos }}_${{ matrix.goarch }}*
            dist/cli_${{ matrix.goos }}_${{ matrix.goarch }}*

  release:
    name: Publish release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Collect files
        run: |
          mkdir -p upload
          find dist -type f -maxdepth 2 -print -exec cp {} upload/ \;
          ls -la upload
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

